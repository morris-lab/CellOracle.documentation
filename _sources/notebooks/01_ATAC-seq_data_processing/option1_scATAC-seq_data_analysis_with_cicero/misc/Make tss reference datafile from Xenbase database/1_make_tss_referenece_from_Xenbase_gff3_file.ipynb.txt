{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overview\n",
    "\n",
    "\n",
    "In this notebook, we will make TSS annotation data that are used for the scATAC-seq peak annotation.\n",
    "\n",
    "\n",
    "- First, we download gene annotation gff3 file from Ensembl database.\n",
    "- Second, we convert gff3 file into bed file. During this process, the TSS information is extracted.\n",
    "\n",
    "\n",
    "# !! Caution!!  \n",
    "\n",
    "## 1) This is NOT part of CellOracle tutorial. \n",
    "- This notebook includes unusual usage of CellOracle. \n",
    "- The analysis might require expertise of python and DNA sequence analysis, but this notebook does not aim to explain them all, and please use this notebook by your responsibility.\n",
    "\n",
    "## 2) This notebook was tested with Ensembl Guinea Pig data, but we do not guarantee the function works with other species or other database. \n",
    "\n",
    "- Please let us know using git hub issue if you have problem with this notebook.\n",
    "- We can construct TSS annotation data and add them to CellOracle package. Please just let us know if you have a request for new reference genome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/k/anaconda3/envs/pandas1/lib/python3.6/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.26.9) or chardet (3.0.4) doesn't match a supported version!\n",
      "  RequestsDependencyWarning)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import os, sys\n",
    "from tqdm.notebook import  tqdm\n",
    "\n",
    "from pybedtools import BedTool\n",
    "import genomepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.10.13'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import celloracle as co\n",
    "from celloracle import motif_analysis as ma\n",
    "\n",
    "co.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Define custom functions to process gene annotation data.\n",
    "\n",
    "Extract TSS information from gff3 file and get a bed file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_ens(x):\n",
    "    dic = {}\n",
    "    if \";\" in str(x):\n",
    "        for i in x.split(\";\"):\n",
    "            key, val = i.split(\"=\")\n",
    "            dic[key] = val\n",
    "    return dic\n",
    "\n",
    "def get_tss_and_promoter_candidate_locus(data, n_downstream=500, n_upstream=500, clip_negative=True):\n",
    "    data[\"TSS\"] = data[\"start\"]\n",
    "    \n",
    "    mRNA_in_reversed_strand = data.index[data[\"strand\"] == \"-\"]\n",
    "    data.loc[mRNA_in_reversed_strand, \"TSS\"] = \\\n",
    "        data.loc[mRNA_in_reversed_strand, \"end\"]\n",
    "    \n",
    "    data[\"promTSS_left\"] = data[\"TSS\"] - n_upstream\n",
    "    data[\"promTSS_right\"] = data[\"TSS\"] + n_downstream\n",
    "    \n",
    "    data.loc[mRNA_in_reversed_strand, \"promTSS_left\"] = \\\n",
    "        data.loc[mRNA_in_reversed_strand, \"TSS\"] - n_downstream\n",
    "    data.loc[mRNA_in_reversed_strand, \"promTSS_right\"] = \\\n",
    "        data.loc[mRNA_in_reversed_strand, \"TSS\"] + n_upstream\n",
    "    \n",
    "    if clip_negative:\n",
    "        data.loc[data.index[data.promTSS_left < 0], \"promTSS_left\"] = 0\n",
    "    \n",
    "    return data\n",
    "\n",
    "def merge_overlapping_peaks(df_):\n",
    "    \n",
    "    gene_symbol = df_.gene_symbol.unique()\n",
    "    assert(len(gene_symbol) == 1)\n",
    "    \n",
    "    strand = df_.strand.unique()\n",
    "    assert(len(strand) == 1)\n",
    "\n",
    "    df_bt = BedTool.from_dataframe(df_).sort()\n",
    "    df_ = df_bt.merge(d=0).to_dataframe()\n",
    "    df_[\"gene_symbol\"] = gene_symbol[0]\n",
    "    df_[\"score\"] = \".\"\n",
    "    df_[\"strand\"] = strand[0]\n",
    "    df_ = df_.rename(columns={\"chrom\": \"seqname\", \"start\": \"promTSS_left\", \"end\":\"promTSS_right\"})\n",
    "    \n",
    "    return df_\n",
    "\n",
    "def load_and_process_ensembl_gff3_file(file, n_downstream=100, n_upstream=1000, clip_negative=True):\n",
    "    # Load gff file. Comments rows are skipped.\n",
    "    lines = []\n",
    "    with open(file, \"r\") as f:\n",
    "        for i, l in enumerate(f.readlines()):\n",
    "            if l.startswith(\"#\"):\n",
    "                pass\n",
    "            else:\n",
    "                lines.append(l.replace(\"\\n\", \"\").split(\"\\t\"))\n",
    "    df = pd.DataFrame(lines)\n",
    "\n",
    "    # Data format adjustment 1\n",
    "    df.columns = [\"seqname\", \"source\", \"feature\", \"start\", \"end\", \"score\",\n",
    "                  \"strand\", \"frame\", \"attribute\"]\n",
    "\n",
    "    df[\"start\"] = df[\"start\"].astype(\"int\")\n",
    "    df[\"end\"] = df[\"end\"].astype(\"int\")\n",
    "\n",
    "\n",
    "    # Data format adjustment 2\n",
    "    ## The attribute column includes detailed information. Let's extract information and store them as new columns. \n",
    "    annot = pd.DataFrame([parse_ens(i) for i in tqdm(df[\"attribute\"])])\n",
    "    df = pd.concat([df, annot], axis=1)\n",
    "\n",
    "\n",
    "    # Split data into gene entry and transcript entry.\n",
    "    df_gene = df[df.feature==\"gene\"]\n",
    "    df_gene[\"gene_symbol\"] = df_gene.gene\n",
    "\n",
    "    df_transcript = df[df.feature == \"mRNA\"]\n",
    "    df_transcript[\"gene_symbol\"] = df_transcript.gene\n",
    "\n",
    "\n",
    "    # Add PromoterTSS location. \n",
    "    df_transcript = get_tss_and_promoter_candidate_locus(df_transcript, \n",
    "                                         n_downstream=n_downstream, n_upstream=n_upstream, clip_negative=clip_negative)\n",
    "\n",
    "    # Wrap up necessary information.\n",
    "    result = df_transcript[[\"seqname\", \"promTSS_left\", \"promTSS_right\",\n",
    "                        \"gene_symbol\", \"score\", \"strand\"]]\n",
    "    \n",
    "    # Merge overlapping peaks\n",
    "    li = []\n",
    "    for i in tqdm(result.gene_symbol.unique()):\n",
    "        df_ = result[result.gene_symbol == i]\n",
    "        if len(df_) == 1:\n",
    "            li.append(df_)\n",
    "        else:\n",
    "            li.append(merge_overlapping_peaks(df_))\n",
    "    result_merged = pd.concat(li, axis=0)\n",
    "\n",
    "    return result_merged"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Install reference genome first.\n",
    "\n",
    "We use genomepy to get genomic DNA sequence.\n",
    "The first step is to install reference genome data.\n",
    "\n",
    "We will use the genomepy function.\n",
    "`genomepy.install_genome()`\n",
    "\n",
    "We need (1) referenoce genome name and (2) provider.\n",
    "\n",
    "Please see genomepy's documentation for more information. https://pypi.org/project/genomepy/\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/k/anaconda3/envs/pandas1/lib/python3.6/site-packages/requests/__init__.py:91: RequestsDependencyWarning: urllib3 (1.26.9) or chardet (3.0.4) doesn't match a supported version!\n",
      "  RequestsDependencyWarning)\n",
      "\u001b[1mname                    provider    accession          species                                      tax_id    other_info                                     \u001b[0m\n",
      "\u001b[0mxenLae2                 UCSC        GCA_001663975.1    Xenopus laevis                               8355      Aug. 2016 (Xenopus_laevis_v2/xenLae2)          \u001b[0m\n",
      "\u001b[0mXenopus_laevis_v2       NCBI        GCA_001663975.1    Xenopus laevis                               8355      International Xenopus Sequencing Consortium    \u001b[0m\n",
      "\u001b[0mViralProj30173          NCBI        GCA_000875345.1    Xenopus laevis endogenous retrovirus Xen1    204873    NCBI                                           \u001b[0m\n",
      "\u001b[0mXenopus_laevis_v10.1    NCBI        GCA_017654675.1    Xenopus laevis                               8355      International Xenopus Sequencing Consortium    \u001b[0m\n",
      "\u001b[0m\u001b[32m ^\u001b[0m\n",
      "\u001b[0m\u001b[32m Use name for \u001b[36mgenomepy install\u001b[0m\n",
      "\u001b[0m\u001b[0m"
     ]
    }
   ],
   "source": [
    "# Search for reference genome name and provider\n",
    "!genomepy search \"Xenopus laevis\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install reference genome. You can skip this step if you already installed reference genome.\n",
    "ref_genome = \"Xenopus_laevis_v10.1\"\n",
    "provider = \"NCBI\"\n",
    "genomepy.install_genome(ref_genome, provider)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check referenoce genome installation status\n",
    "genome_installation = ma.is_genome_installed(ref_genome=ref_genome)\n",
    "genome_installation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Download genome annotation file; gff3 file, from Xenbase server. \n",
    "https://www.xenbase.org/\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2022-12-27 14:05:01--  https://ftp.xenbase.org/pub/Genomics/JGI/Xenla10.1/XENLA_10.1_GCF_XBmodels.gff3\n",
      "Resolving ftp.xenbase.org (ftp.xenbase.org)... 136.159.155.151\n",
      "Connecting to ftp.xenbase.org (ftp.xenbase.org)|136.159.155.151|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 614234189 (586M) [text/gff3]\n",
      "Saving to: ‘XENLA_10.1_GCF_XBmodels.gff3’\n",
      "\n",
      "XENLA_10.1_GCF_XBmo 100%[===================>] 585.78M  28.7MB/s    in 21s     \n",
      "\n",
      "2022-12-27 14:05:23 (28.0 MB/s) - ‘XENLA_10.1_GCF_XBmodels.gff3’ saved [614234189/614234189]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://ftp.xenbase.org/pub/Genomics/JGI/Xenla10.1/XENLA_10.1_GCF_XBmodels.gff3\n",
    "#!wget https://ftp.xenbase.org/pub/Genomics/JGI/Xenla10.1/XENLA_10.1_GCF.gff3    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4. Process data to get TSS file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e22e715cf5d542f2a4c5357cee03beda",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=2145166.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3581d19e6eb9429aaf15c4fe1f8e7a44",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(FloatProgress(value=0.0, max=34463.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load and process gff3 file.\n",
    "\n",
    "file = \"XENLA_10.1_GCF_XBmodels.gff3\"\n",
    "result = load_and_process_ensembl_gff3_file(file, n_downstream=100, \n",
    "                                            n_upstream=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seqname</th>\n",
       "      <th>promTSS_left</th>\n",
       "      <th>promTSS_right</th>\n",
       "      <th>gene_symbol</th>\n",
       "      <th>score</th>\n",
       "      <th>strand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>45901</td>\n",
       "      <td>47001</td>\n",
       "      <td>LOC108704873</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>124971</td>\n",
       "      <td>126071</td>\n",
       "      <td>LOC108704861</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>165766</td>\n",
       "      <td>166866</td>\n",
       "      <td>dok1.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>171675</td>\n",
       "      <td>172775</td>\n",
       "      <td>dok1.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>182964</td>\n",
       "      <td>184064</td>\n",
       "      <td>mrps26.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chr9_10S</td>\n",
       "      <td>117182648</td>\n",
       "      <td>117184109</td>\n",
       "      <td>mgrn1.S</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chr9_10S</td>\n",
       "      <td>117202519</td>\n",
       "      <td>117203908</td>\n",
       "      <td>ccdc78.S</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145038</th>\n",
       "      <td>Chr9_10S</td>\n",
       "      <td>117230153</td>\n",
       "      <td>117231253</td>\n",
       "      <td>fbxl16.S</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145055</th>\n",
       "      <td>Sca23</td>\n",
       "      <td>10015</td>\n",
       "      <td>11115</td>\n",
       "      <td>LOC108698152</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145077</th>\n",
       "      <td>Sca37</td>\n",
       "      <td>0</td>\n",
       "      <td>105</td>\n",
       "      <td>LOC108706079</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>41925 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          seqname  promTSS_left  promTSS_right   gene_symbol score strand\n",
       "0           Chr1L         45901          47001  LOC108704873     .      +\n",
       "41          Chr1L        124971         126071  LOC108704861     .      +\n",
       "0           Chr1L        165766         166866        dok1.L     .      -\n",
       "1           Chr1L        171675         172775        dok1.L     .      -\n",
       "78          Chr1L        182964         184064      mrps26.L     .      -\n",
       "...           ...           ...            ...           ...   ...    ...\n",
       "0        Chr9_10S     117182648      117184109       mgrn1.S     .      +\n",
       "0        Chr9_10S     117202519      117203908      ccdc78.S     .      +\n",
       "2145038  Chr9_10S     117230153      117231253      fbxl16.S     .      -\n",
       "2145055     Sca23         10015          11115  LOC108698152     .      -\n",
       "2145077     Sca37             0            105  LOC108706079     .      +\n",
       "\n",
       "[41925 rows x 6 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save as bed file\n",
    "result.to_csv(f\"{ref_genome}_tss_info.bed\", sep='\\t', header=False, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Test\n",
    "Try to load DNA sequence using genomepy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>chrom</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>name</th>\n",
       "      <th>score</th>\n",
       "      <th>strand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>45901</td>\n",
       "      <td>47001</td>\n",
       "      <td>LOC108704873</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>124971</td>\n",
       "      <td>126071</td>\n",
       "      <td>LOC108704861</td>\n",
       "      <td>.</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>165766</td>\n",
       "      <td>166866</td>\n",
       "      <td>dok1.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>171675</td>\n",
       "      <td>172775</td>\n",
       "      <td>dok1.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Chr1L</td>\n",
       "      <td>182964</td>\n",
       "      <td>184064</td>\n",
       "      <td>mrps26.L</td>\n",
       "      <td>.</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   chrom   start     end          name score strand\n",
       "0  Chr1L   45901   47001  LOC108704873     .      +\n",
       "1  Chr1L  124971  126071  LOC108704861     .      +\n",
       "2  Chr1L  165766  166866        dok1.L     .      -\n",
       "3  Chr1L  171675  172775        dok1.L     .      -\n",
       "4  Chr1L  182964  184064      mrps26.L     .      -"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load file\n",
    "tss_file = BedTool(f\"{ref_genome}_tss_info.bed\").to_dataframe()\n",
    "tss_file.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "41925 sequences"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get DNA sequence\n",
    "\n",
    "peak_ids = tss_file[\"chrom\"] + \"_\" + tss_file[\"start\"].astype(\"str\") + \"_\" + tss_file[\"end\"].astype(\"str\")\n",
    "peak_ids = peak_ids.to_list()\n",
    "\n",
    "fa = ma.peak2fasta(peak_ids, ref_genome=ref_genome)\n",
    "fa"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chr1L_45902_47001 \n",
      " TTCCGGGGTGAATTATACAAGGGTGCCTTATTCAGGGAAGGGCTATAGTGAGTTATTCAGAGGTGGATTATACATGGGAGAATTTTTTCAGTGAGAATTATTGAGGTTTGAGTTATATAGAAAgggtaaatatatatgtaaaggcAAGTGATTGATGTTCCCCAACGCCACAGAGAAGATTGGCTTATAGGAAAGGAACCATGGGAAACCTTCTAAACCCCCTCCCTTATCAAAATTCTAACATAGATATAAGACAAAGACCACTTGACTGATGGTGGAGAAAggcatttattaattcatttgaTAATATTAGTAATCAACAGTTTTAGACAACTTAATTATAATCAGTCTAATGAAAATCAATAGAATTGTACATATTGTCTCTCTTACCCGCCCACATTTTTTGGTGGGAGTGTTAGCTCTAAACCAGTAAAACAATAGATCTGGGATACAGAACTGGCACTGGGATGATAGCGGCCAGCAGGGAAACCTTGTGTGTGACCCACAGGCCATTGGCTTGTGATACATAAGGAGCAATAGTTCTAGTAGAATATGTAAGTAGAGCACAGTTAGCCAGTAGGCCGCTCCATATCCCTGGGCAGTACCTCTGGGCTCAAGCGCTGATACAGTACATGACACAGGGGTGTGGCCTAAAACTGCTTGTCAGTATGGGATCAATTCCCACCCCCCGTGCCCTGTGATGTTCCTCTATTCATCAATAAAGGCAATATGTATCCCAGTAGAAAGTTTGTAGGGCCCCaatctataaaaaggaaaagCTCCTAGGTGTGACCATCATATCTCACTGGGGGTCATGACAGGGGGTTAAGGAAACTGGGATATATTTCTGGGATATTTTTCTTTAGTCTAGACTCTAGGGAAAGGCAAGGTCTGCCAATTCCACTCCCGTATCTCATTATGGGACACTTCTGGCTAGAGAATGGGGATGGGGCGGGGCtagtattggggggggggagtttcaTAGTGAGAATAAAACATAAAGTCATAGTGGTCAATTATTGTCATTCACTTGTTAACTAGTTAACATGAGGTGGCTCATACTTTTACTCTGGGGGGCAATAGGCCAAGGACTAGAACGG \n",
      "\n",
      "Chr1L_124972_126071 \n",
      " TTATAGTGCAGGTGGCATTTAGTTGCCGCCCCCCAACACTGCACATCATTGGTTGCTGGGAGCAATGCCCTTGGCTTGGGCAGGATTATGTGTTATGGGCAATTATCCCATGGGGTCAGAGCCAAGGGTTAGCGCATTTCAGCCAAGGCAGGTGAATTGCACCAGGAATTGGGATGGGGGTGGGGAAGTAATTGCAGGCCCCAAGACCATCATAAAGCAGCAGAATCATTTTACTGGGACCCTATAAAGTGAGAAAGGAAACGATCATCCGGAAAGAATTTTTACAGAGGAAAATGTGCCAAAAGTAACAAATTTGGGGCTAAAAAAGTGAAATTAGATAATAGGGAAAATGAAGGGTTGGAGAAAGGCAACAAATTCACGTGGATTTTAGTGAGTCTGTTAAACAGGCAATTGAGTTTGCAATGGGGggagaaatatttaaatatatccaCCATGATCTACATCTGATTCCTTCTACCAtcatctctccctctctctctctctctctctctctctctctctctcccccctctctctctctctttctctctccctctctctctctctctctctctctctctctctctctctctttctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctctccctctctctctctctctctctctctctctctctccctctctctctctctctctctctccctctctctctctctctctctctctctctctctctctctctctctctctctctgccctctgTTGAACCCATGATATTGATCCTGTAGGTTTTGTTGCTCTGCCCccagtgctgctgctgctcctcagAGTTCCCAGTTGGACGGACAGTCTGTTCTCAGACTCTGCCCAGTCCCAGATCCCTTAAACACAATATTTCTGCGTCCAGCACAATGCATCAGCGGGTGTGGTGAGACGTTCAGGTCCACCCTGTTACAGCTTTTATATCCTCCCCACTGCACTCAAATATCTCACACCATATAGGAACAGAGACTGACAGTGACTCACATACAGTGAATGACACAATCACACACTGTAGAAATCGAGACCATATTGTTGAGGCAT \n",
      "\n",
      "Chr1L_165767_166866 \n",
      " GACtggttgggattgaggaatacggaccactgaacaaagTTGTACTTTTACAAGCGCAAATCAGCAGACGGCCGTGCGTTCTCATGAGTACGTATCAGAACAAGCCCtgctaagatcactgtgtctgtgtatatgtatattaccgggggaagtgccttttgtcctggtgtcttttgtttgcctaggacagactacctttccccccccctcttctatggacatgtgtctgtgtgctggttccaccaattgattcatagcataacatgctcattgattggatatattgtaagaccaccttcTGTCTTGGtctataataaaccactggccattgtagagggaggcagaatactggaccccagctaagaacgactgctgtgacgttatttccgggggattgcgcaacatcaccacgcgatacatcaaggtttccggatcgattgtccattaaggcaaAAGATCGTTTTTCCTACTATAACAGactctaaggggtaaatttatcagagtgaaattccgcagctcttaattcatttctatgggattttgaaaggcgtatttatcaatgggtgaaagtgaaagttcaccctttgataaatacgcttagAGAGATTGGGGTACAGCTGGGGCTCTAGAGAGAAAGTTTGGGGTACAGCTGGGGCTCTAGAGAGAAAGTTTGGGGTACAGCTGGggttctagagagagagagagagagagagattgaggtaCAGCTGGggttctagagagagagagagagagagagattggggcACAGATGGGGCTCTAGAGAGAGCTTGGGGTACAGCTggggctctagagagagagattggggtaCAGCTGGGGCTGTAGAGAGAGACTTTGGGGTACAGCTGGGGCTGTAGAGAGAGAGACTTTGGGGTACAGCTGGGCTCTAGAGAGAGTTTGGGGTACAGCTGGGCTCTAGAGAGATTGGGGTACAGCTggggctctagagagagagattggggtaCAGCTGGGGCTCTAGAGAGAGATTGGGGTACAGCTGGGGCTCTTGAGAGACACTTTGGGGTACAGCTGGGGCTCTAGAGAGAGACTTTGGGGTACAGCTGGGGCTCTAGAGAGAGACT \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Show 3 sequences\n",
    "n = 3\n",
    "\n",
    "for i, (k, v) in enumerate(fa.items()):\n",
    "    print(k, \"\\n\", v, \"\\n\")\n",
    "    \n",
    "    if i >= n - 1:\n",
    "        break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks good"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove gff3 file.\n",
    "!rm ./*gff3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1_make_tss_referenece_from_Xenbase_gff3_file.ipynb\r\n",
      "Xenopus_laevis_v10.1_tss_info.bed\r\n"
     ]
    }
   ],
   "source": [
    "ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "finalized": {
   "timestamp": 1672180775531,
   "trusted": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
