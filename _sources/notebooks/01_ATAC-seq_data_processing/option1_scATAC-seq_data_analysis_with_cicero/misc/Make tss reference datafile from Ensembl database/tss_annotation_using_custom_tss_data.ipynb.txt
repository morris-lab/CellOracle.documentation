{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overview\n",
    "\n",
    "\n",
    "In this notebook, we will make TSS annotation in the Cicero coaccessible peak data to get input data of base-GRN construction. \n",
    "- First, we pick up peaks around the transcription starting site (TSS).\n",
    "- Second, we merge cicero data with the peaks around TSS.\n",
    "- Then we remove peaks that have a weak connection to TSS peak so that the final product includes TSS peaks and peaks that have a strong connection with the TSS peaks. We use this information as an active promoter/enhancer elements.\n",
    "\n",
    "\n",
    "#### Although CellOracle supports basic model organisms and reference genomes, you may want to use a different reference genome that is not in the supported reference genome list.\n",
    "\n",
    "#### Here, we introduce how to use custom TSS database for the annotation process the reference genome not in the default CellOracle.\n",
    "Please lookt at another notebook for the detailed process to make the custom TSS database for your species of interest.\n",
    "\n",
    "# !! Caution!!  This is NOT part of CellOracle tutorial. \n",
    "- This notebook includes unusual usage of CellOracle. \n",
    "- The analysis might require expertise of python and DNA sequence analysis, but this notebook does not aim to explain them all, and please use this notebook by your responsibility.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Import libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "\n",
    "import os, sys, shutil, importlib, glob\n",
    "from tqdm.notebook import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.8.4'"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from celloracle import motif_analysis as ma\n",
    "import celloracle as co\n",
    "co.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "plt.rcParams['figure.figsize'] = [6, 4.5]\n",
    "plt.rcParams[\"savefig.dpi\"] = 300"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Load ATAC-seq peak data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load scATAC-seq peak list.\n",
    "peaks = pd.read_csv(\"Cavpor3.0_tss_info.bed\", delimiter=\"\\t\", header=None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "peaks = peaks.iloc[100:200,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "peaks = peaks[0] + \"_\" + peaks[1].astype(\"str\") + \"_\" + peaks[2].astype('str')\n",
    "peaks = pd.DataFrame(peaks)\n",
    "peaks = peaks.reset_index(drop=True)\n",
    "peaks.columns = [\"x\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "peaks.to_csv(\"peaks_example.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1. Load data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['DS562855.1_17325102_17326202', 'DS562855.1_17604709_17605809',\n",
       "       'DS562855.1_17717213_17718313', 'DS562855.1_17793186_17794286',\n",
       "       'DS562855.1_17850610_17851710', 'DS562855.1_17927367_17928467',\n",
       "       'DS562855.1_17963096_17964196', 'DS562855.1_17981058_17982158',\n",
       "       'DS562855.1_17984493_17985593', 'DS562855.1_18107565_18108665',\n",
       "       'DS562855.1_18165123_18166223', 'DS562855.1_18244816_18245916',\n",
       "       'DS562855.1_19083904_19085004', 'DS562855.1_19139148_19140248',\n",
       "       'DS562855.1_18763492_18764592', 'DS562855.1_19261363_19262463',\n",
       "       'DS562855.1_19432676_19433776', 'DS562855.1_19447039_19448139',\n",
       "       'DS562855.1_19469701_19470801', 'DS562855.1_19545326_19546426',\n",
       "       'DS562855.1_19600418_19601518', 'DS562855.1_20259647_20260747',\n",
       "       'DS562855.1_20358849_20359949', 'DS562855.1_20487020_20488120',\n",
       "       'DS562855.1_20483135_20484235', 'DS562855.1_20607536_20608636',\n",
       "       'DS562855.1_20687876_20688976', 'DS562855.1_20687876_20688976',\n",
       "       'DS562855.1_20691098_20692198', 'DS562855.1_20797258_20798358',\n",
       "       'DS562855.1_20796859_20797959', 'DS562855.1_20865081_20866181',\n",
       "       'DS562855.1_20851113_20852213', 'DS562855.1_20864982_20866082',\n",
       "       'DS562855.1_20820597_20821697', 'DS562855.1_20869367_20870467',\n",
       "       'DS562855.1_20931260_20932360', 'DS562855.1_20930958_20932058',\n",
       "       'DS562855.1_20930874_20931974', 'DS562855.1_20910513_20911613',\n",
       "       'DS562855.1_20930832_20931932', 'DS562855.1_20975923_20977023',\n",
       "       'DS562855.1_20975923_20977023', 'DS562855.1_21028333_21029433',\n",
       "       'DS562855.1_21044723_21045823', 'DS562855.1_21070169_21071269',\n",
       "       'DS562855.1_21237963_21239063', 'DS562855.1_21263108_21264208',\n",
       "       'DS562855.1_21636253_21637353', 'DS562855.1_21645638_21646738',\n",
       "       'DS562855.1_21671741_21672841', 'DS562855.1_22376594_22377694',\n",
       "       'DS562855.1_22679232_22680332', 'DS562855.1_23054281_23055381',\n",
       "       'DS562855.1_23078558_23079658', 'DS562855.1_23091892_23092992',\n",
       "       'DS562855.1_23131090_23132190', 'DS562855.1_23836621_23837721',\n",
       "       'DS562855.1_23941930_23943030', 'DS562855.1_23927381_23928481',\n",
       "       'DS562855.1_23981205_23982305', 'DS562855.1_24006813_24007913',\n",
       "       'DS562855.1_24018616_24019716', 'DS562855.1_24247214_24248314',\n",
       "       'DS562855.1_24338611_24339711', 'DS562855.1_24767458_24768558',\n",
       "       'DS562855.1_24928442_24929542', 'DS562855.1_25014962_25016062',\n",
       "       'DS562855.1_25024283_25025383', 'DS562855.1_25086948_25088048',\n",
       "       'DS562855.1_25234257_25235357', 'DS562855.1_25287704_25288804',\n",
       "       'DS562855.1_26402003_26403103', 'DS562855.1_26513868_26514968',\n",
       "       'DS562855.1_26558371_26559471', 'DS562855.1_26759465_26760565',\n",
       "       'DS562855.1_27347552_27348652', 'DS562855.1_27577221_27578321',\n",
       "       'DS562855.1_27718782_27719882', 'DS562855.1_27917760_27918860',\n",
       "       'DS562855.1_28018334_28019434', 'DS562855.1_28133452_28134552',\n",
       "       'DS562855.1_28257472_28258572', 'DS562855.1_28257478_28258578',\n",
       "       'DS562855.1_28284228_28285328', 'DS562855.1_28673851_28674951',\n",
       "       'DS562855.1_28697999_28699099', 'DS562855.1_28785102_28786202',\n",
       "       'DS562855.1_28866031_28867131', 'DS562855.1_28895390_28896490',\n",
       "       'DS562855.1_29802833_29803933', 'DS562855.1_29802740_29803840',\n",
       "       'DS562855.1_29802740_29803840', 'DS562855.1_30001562_30002662',\n",
       "       'DS562855.1_30173889_30174989', 'DS562855.1_30556086_30557186',\n",
       "       'DS562855.1_31289869_31290969', 'DS562855.1_32080107_32081207',\n",
       "       'DS562855.1_32196830_32197930', 'DS562855.1_32196830_32197930'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load scATAC-seq peak list.\n",
    "peaks = pd.read_csv(\"peaks_example.csv\", index_col=0)\n",
    "peaks = peaks.x.values\n",
    "peaks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Make TSS annotation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "que bed peaks: 100\n",
      "tss peaks in que: 130\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>chr</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>gene_short_name</th>\n",
       "      <th>strand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>DS562855.1</td>\n",
       "      <td>17325102</td>\n",
       "      <td>17326202</td>\n",
       "      <td>7SK</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>DS562855.1</td>\n",
       "      <td>17604709</td>\n",
       "      <td>17605809</td>\n",
       "      <td>KCNS2</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DS562855.1</td>\n",
       "      <td>17717213</td>\n",
       "      <td>17718313</td>\n",
       "      <td>NIPAL2</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>DS562855.1</td>\n",
       "      <td>17793186</td>\n",
       "      <td>17794286</td>\n",
       "      <td>U6</td>\n",
       "      <td>+</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>DS562855.1</td>\n",
       "      <td>17850610</td>\n",
       "      <td>17851710</td>\n",
       "      <td>POP1</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          chr     start       end gene_short_name strand\n",
       "0  DS562855.1  17325102  17326202             7SK      +\n",
       "1  DS562855.1  17604709  17605809           KCNS2      -\n",
       "2  DS562855.1  17717213  17718313          NIPAL2      +\n",
       "3  DS562855.1  17793186  17794286              U6      +\n",
       "4  DS562855.1  17850610  17851710            POP1      -"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tss_annotated = ma.get_tss_info(peak_str_list=peaks, \n",
    "                                ref_genome=\"Cavpor3.0\",\n",
    "                                custom_tss_file_path=\"Cavpor3.0_tss_info.bed\"##!! Set custom TSS bed file here\n",
    "                                ) ##!! Set custom TSS bed file here\n",
    "\n",
    "# Check results\n",
    "tss_annotated.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "finalized": {
   "timestamp": 1640822542157,
   "trusted": true
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
