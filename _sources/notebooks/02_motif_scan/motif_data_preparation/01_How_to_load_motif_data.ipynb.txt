{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 0. Overview: How to use a different motifs for celloracle motif scan.\n",
    "\n",
    "In this notebook, we introduce how to prepare motif dataset for celloracle motif analysis.\n",
    "Celloracle uses list of motif object in gimmemotifs package. See gimmemotifs documentation for more details. (https://gimmemotifs.readthedocs.io/en/master/api.html#)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1 Import motifs from gimmemotifs dataset.\n",
    "\n",
    "Gimmemotifs provides many motif dataset that was generated from public motif database including CisDB, ENCODE, HOMER, and JASPAR.\n",
    "https://gimmemotifs.readthedocs.io/en/master/overview.html\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.1 gimme.vertebrate.v5.0.\n",
    "\n",
    "By default GimmeMotifs uses a non-redundant, clustered database of known vertebrate motifs. \n",
    "These motifs come from CIS-BP (http://cisbp.ccbr.utoronto.ca/) and other sources. \n",
    "This motif dataset can be easily loaded with the following command.\n",
    "\n",
    "If your dataset is Mouse or Human, this one will be a good default choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[GM.5.0.Sox.0001_AACAAT,\n",
       " GM.5.0.Homeodomain.0001_AGCTGTCAnnA,\n",
       " GM.5.0.Mixed.0001_snnGGsssGGs,\n",
       " GM.5.0.Nuclear_receptor.0001_TAwsTrGGTCAsTrGGTCA,\n",
       " GM.5.0.Mixed.0002_GCTAATTA,\n",
       " GM.5.0.Nuclear_receptor.0002_wnyrCTTCCGGGkC,\n",
       " GM.5.0.bHLH.0001_ACGTG,\n",
       " GM.5.0.Myb_SANT.0001_rrCCGTTAAACnGyy,\n",
       " GM.5.0.C2H2_ZF.0001_GCGkGGGCGG,\n",
       " GM.5.0.GATA.0001_TTATCTsnnnnnnnCA]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Compare with default motifs in gimmemotifs\n",
    "from gimmemotifs.motif import default_motifs\n",
    "motifs =  default_motifs()\n",
    "\n",
    "# Check first 10 motifs\n",
    "motifs[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.2 Motifs that are provided with gimmemotifs package\n",
    "\n",
    "Many other motif databases come included with GimmeMotifs\n",
    "You can load them as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CIS-BP.pfm',\n",
       " 'ENCODE.pfm',\n",
       " 'HOCOMOCOv10_HUMAN.pfm',\n",
       " 'HOCOMOCOv10_MOUSE.pfm',\n",
       " 'HOCOMOCOv11_HUMAN.pfm',\n",
       " 'HOCOMOCOv11_MOUSE.pfm',\n",
       " 'HOMER.pfm',\n",
       " 'IMAGE.pfm',\n",
       " 'JASPAR2018.pfm',\n",
       " 'JASPAR2018_fungi.pfm',\n",
       " 'JASPAR2018_insects.pfm',\n",
       " 'JASPAR2018_nematodes.pfm',\n",
       " 'JASPAR2018_plants.pfm',\n",
       " 'JASPAR2018_urochordates.pfm',\n",
       " 'JASPAR2018_vertebrates.pfm',\n",
       " 'JASPAR2020.pfm',\n",
       " 'JASPAR2020_fungi.pfm',\n",
       " 'JASPAR2020_insects.pfm',\n",
       " 'JASPAR2020_nematodes.pfm',\n",
       " 'JASPAR2020_plants.pfm',\n",
       " 'JASPAR2020_urochordates.pfm',\n",
       " 'JASPAR2020_vertebrates.pfm',\n",
       " 'RSAT_insects.pfm',\n",
       " 'RSAT_plants.pfm',\n",
       " 'RSAT_vertebrates.pfm',\n",
       " 'SwissRegulon.pfm',\n",
       " 'factorbook.pfm',\n",
       " 'gimme.vertebrate.v5.0.pfm']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get folder path that stores motif data.\n",
    "import os, glob\n",
    "from gimmemotifs.motif import MotifConfig\n",
    "config = MotifConfig()\n",
    "motif_dir = config.get_motif_dir()\n",
    "\n",
    "# Get motif data names\n",
    "motifs_data_name = [i for i in os.listdir(motif_dir) if i.endswith(\".pfm\")]\n",
    "motifs_data_name.sort()\n",
    "motifs_data_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[MA0020.1_Dof2_AAAGCn,\n",
       " MA0021.1_Dof3_AAAGyn,\n",
       " MA0034.1_Gam1_nnyAACCGmC,\n",
       " MA0044.1_HMG-1_sTTGTnyTy,\n",
       " MA0045.1_HMG-I/Y_nwAnAAAnrnmrAmAy,\n",
       " MA0053.1_MNB1A_AAAGC,\n",
       " MA0054.1_myb.Ph3_TAACnGTTw,\n",
       " MA0064.1_PBF_AAAGy,\n",
       " MA0082.1_squamosa_mCAwAwATrGwAAn,\n",
       " MA0096.1_bZIP910_mTGACGT]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# You can load motif files with \"read_motifs\"\n",
    "from gimmemotifs.motif import read_motifs\n",
    "\n",
    "path = os.path.join(motif_dir, \"JASPAR2018_plants.pfm\")\n",
    "motifs = read_motifs(path)\n",
    "\n",
    "# Check first 10 motifs\n",
    "motifs[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Import motifs from Celloracle dataset.\n",
    "\n",
    "Celloracle provides many motif dataset that was generated from CisDB.\n",
    "These motifs were divided by species. Please select motifs for your species.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['CisBP_ver2_Arabidopsis_thaliana.pfm',\n",
       " 'CisBP_ver2_Caenorhabditis_elegans.pfm',\n",
       " 'CisBP_ver2_Danio_rerio.pfm',\n",
       " 'CisBP_ver2_Drosophila_ananassae.pfm',\n",
       " 'CisBP_ver2_Drosophila_erecta.pfm',\n",
       " 'CisBP_ver2_Drosophila_grimshawi.pfm',\n",
       " 'CisBP_ver2_Drosophila_melanogaster.pfm',\n",
       " 'CisBP_ver2_Drosophila_mix.pfm',\n",
       " 'CisBP_ver2_Drosophila_mojavensis.pfm',\n",
       " 'CisBP_ver2_Drosophila_persimilis.pfm',\n",
       " 'CisBP_ver2_Drosophila_pseudoobscura.pfm',\n",
       " 'CisBP_ver2_Drosophila_sechellia.pfm',\n",
       " 'CisBP_ver2_Drosophila_simulans.pfm',\n",
       " 'CisBP_ver2_Drosophila_virilis.pfm',\n",
       " 'CisBP_ver2_Drosophila_willistoni.pfm',\n",
       " 'CisBP_ver2_Drosophila_yakuba.pfm',\n",
       " 'CisBP_ver2_Homo_sapiens.pfm',\n",
       " 'CisBP_ver2_Mus_musculus.pfm',\n",
       " 'CisBP_ver2_Rattus_norvegicus.pfm',\n",
       " 'CisBP_ver2_Saccharomyces_cerevisiae.pfm',\n",
       " 'CisBP_ver2_Xenopus_laevis.pfm',\n",
       " 'CisBP_ver2_Xenopus_tropicalis.pfm',\n",
       " 'CisBP_ver2_Xenopus_tropicalis_and_Xenopus_laevis.pfm']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from celloracle import motif_analysis as ma\n",
    "\n",
    "# Check available motifs\n",
    "ma.MOTIFS_LIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[M00056_2.00_TAATAAAT,\n",
       " M00070_2.00_nrAACAATAnn,\n",
       " M00111_2.00_nGCCynnGGs,\n",
       " M00112_2.00_CCTsrGGCnA,\n",
       " M00113_2.00_nsCCnnAGGs,\n",
       " M00114_2.00_nnGCCynnGG,\n",
       " M00115_2.00_nnATnAAAn,\n",
       " M00116_2.00_nnAATATTAnn,\n",
       " M00130_2.00_nnnGCCCCnn,\n",
       " M00142_2.00_GTrCTCmy]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load motifs from celloracle dataset.\n",
    "motifs = ma.load_motifs(\"CisBP_ver2_Homo_sapiens.pfm\")\n",
    "\n",
    "# Check first 10 motifs\n",
    "motifs[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Import motifs from custom motif dataset.\n",
    "\n",
    "If you want to use another motif data source, you need to make a list of motif class in gimmemotifs.\n",
    "The easiest way to make such object is to use \"read_motifs\" function in gimmemotifs.\n",
    "\n",
    "This function can load motif data text file. You need to prepare two files, XXX.motif2factors.txt and XXX.pfm.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.1 XXX.motif2factors.txt\n",
    "The text file, XXX.motif2factors.txt includes TF factor annotation for each motifs.\n",
    "The file should be like a tsv file like below. \n",
    "\n",
    "The first column should be motif name, the motif name should match with motif name in pfm file.\n",
    "The second column is gene symbol, the thrid column is datasource. This column is not important.\n",
    "The forth column is additional information for this factor.\n",
    "The factor is labeled with \"Y\" If factor information was confirmed by some evidence.\n",
    "Otherwise, the factor is labeled with \"N\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Motif\tFactor\tEvidence\tCurated\n",
      "\n",
      "MA0020.1_Dof2\tDof2\tSELEX\tY\n",
      "\n",
      "MA0021.1_Dof3\tDof3\tSELEX\tY\n",
      "\n",
      "MA0034.1_Gam1\tGam1\tSELEX\tY\n",
      "\n",
      "MA0044.1_HMG-1\tHMG-1\tSELEX\tY\n",
      "\n",
      "MA0045.1_HMG-I/Y\tHMG-I/Y\tSELEX\tY\n",
      "\n",
      "MA0053.1_MNB1A\tMNB1A\tSELEX\tY\n",
      "\n"
     ]
    }
   ],
   "source": [
    "path_motif2factors = path.replace(\".pfm\", \".motif2factors.txt\")\n",
    "\n",
    "with open(path_motif2factors, \"r\") as f:\n",
    "    for i, j in enumerate(f):\n",
    "        print(j)\n",
    "        if i>5:\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.2 XXX.pfm\n",
    "The second file, XXX.pfm. should includes motif pwm information.\n",
    "The file shoud be like below.\n",
    "\n",
    "The motif name in this pfm file should exactly match with the motif name in motif2factor.txt file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "# JASPAR2018_plants motif database\n",
      "\n",
      "# Retrieved from: http://jaspar.genereg.net/download/CORE/JASPAR2018_CORE_plants_non-redundant_pfms_jaspar.txt\n",
      "\n",
      "# Date: 2018-10-17\n",
      "\n",
      ">MA0020.1_Dof2\n",
      "\n",
      "0.9999\t0.0000\t0.0000\t0.0000\n",
      "\n",
      "0.9999\t0.0000\t0.0000\t0.0000\n",
      "\n",
      "0.9999\t0.0000\t0.0000\t0.0000\n",
      "\n",
      "0.0000\t0.0000\t0.9999\t0.0000\n",
      "\n",
      "0.1429\t0.6666\t0.0953\t0.0953\n",
      "\n",
      "0.3333\t0.2857\t0.1429\t0.2381\n",
      "\n",
      ">MA0021.1_Dof3\n",
      "\n",
      "0.9999\t0.0000\t0.0000\t0.0000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(path, \"r\") as f:\n",
    "    for i, j in enumerate(f):\n",
    "        print(j)\n",
    "        if i>10:\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3.3 Load files as motif list\n",
    "We can load files using read_motifs function in gimmemotifs.\n",
    "\n",
    "First, please prepare two files, XXX.motif2factors.txt and XXX.pfm. in the same directly.\n",
    "If you have theses two file in a different place, we cannot use the read_motifs function.\n",
    "\n",
    "Then use file path for XXX.pfm for the argument of read_motifs function.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/k/anaconda3/envs/pandas1/lib/python3.6/site-packages/data/motif_databases/JASPAR2018_plants.pfm\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[MA0020.1_Dof2_AAAGCn,\n",
       " MA0021.1_Dof3_AAAGyn,\n",
       " MA0034.1_Gam1_nnyAACCGmC,\n",
       " MA0044.1_HMG-1_sTTGTnyTy,\n",
       " MA0045.1_HMG-I/Y_nwAnAAAnrnmrAmAy,\n",
       " MA0053.1_MNB1A_AAAGC,\n",
       " MA0054.1_myb.Ph3_TAACnGTTw,\n",
       " MA0064.1_PBF_AAAGy,\n",
       " MA0082.1_squamosa_mCAwAwATrGwAAn,\n",
       " MA0096.1_bZIP910_mTGACGT]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from gimmemotifs.motif import read_motifs\n",
    "\n",
    "# Check path for pfm file\n",
    "print(path)\n",
    "\n",
    "# Read motifs\n",
    "motifs = read_motifs(path)\n",
    "\n",
    "# Check first 10 motifs\n",
    "motifs[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In another notebook, we introduce how to make XXX.pfm file and XXX.motif2factors.txt file.\n",
    "Pleas look at that if you want to make your motif data by yourself."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
